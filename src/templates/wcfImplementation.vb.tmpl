#Region "Metodos de {{VAR_NAME}}"
    Public Function {{VAR_NAME}}_Insert(ByVal pConexion As String, ByVal pDatos As {{REG_CLASS_NAME}}) As String Implements {{INTERFACE_NAME}}.{{VAR_NAME}}_Insert
        Dim {{CALLER_VAR}} As New {{CALLER_CLASS}}
        Return {{CALLER_VAR}}.{{CLASS_BASE}}_Insert(pConexion, pDatos)
    End Function

    Public Function {{VAR_NAME}}_Update(ByVal pConexion As String, ByVal pDatos As {{REG_CLASS_NAME}}) As String Implements {{INTERFACE_NAME}}.{{VAR_NAME}}_Update
        Dim {{CALLER_VAR}} As New {{CALLER_CLASS}}
        Return {{CALLER_VAR}}.{{CLASS_BASE}}_Update(pConexion, pDatos)
    End Function

    Public Function {{VAR_NAME}}_Delete(ByVal pConexion As String{{PK_PARAMS_SIGNATURE}}) As String Implements {{INTERFACE_NAME}}.{{VAR_NAME}}_Delete
        Dim {{CALLER_VAR}} As New {{CALLER_CLASS}}
        Return {{CALLER_VAR}}.{{CLASS_BASE}}_Delete(pConexion{{PK_ARGS_LIST}})
    End Function

    Public Function {{VAR_NAME}}_ListKey(ByVal pConexion As String{{PK_PARAMS_SIGNATURE}}) As {{REG_CLASS_NAME}} Implements {{INTERFACE_NAME}}.{{VAR_NAME}}_ListKey
        Dim {{CALLER_VAR}} As New {{CALLER_CLASS}}
        Return {{CALLER_VAR}}.{{CLASS_BASE}}_ListKey(pConexion{{PK_ARGS_LIST}})
    End Function

    Public Function {{VAR_NAME}}_List(ByVal pConexion As String, ByVal pParam As ParamFilter) As DataSet Implements {{INTERFACE_NAME}}.{{VAR_NAME}}_List
        Dim {{CALLER_VAR}} As New {{CALLER_CLASS}}
        Return {{CALLER_VAR}}.{{CLASS_BASE}}_List(pConexion, pParam)
    End Function
#End Region
